<?xml version="1.0" encoding="UTF-8"?>
<project 
     xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation=
       "http://maven.apache.org/POM/4.0.0 
        http://maven.apache.org/maven-v4_0_0.xsd">
       
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>pl.jasox</groupId>
		<artifactId>medclinic</artifactId>
		<version>1.1.1</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

  <groupId>pl.jasox.medclinic</groupId>
	<artifactId>medical-ward-simple</artifactId>	
	<packaging>jar</packaging>
	<name>Medical Ward Simple DAO's</name>
	<description> JS Medical Clinic Application Hibernate DAO Module </description>
	
	<properties>
    <projectScope>compile</projectScope>
    <surefire.version>2.13</surefire.version>    
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>    
		<!-- do testów filtrowania z zachowaniem odpowiedniego kodowania -->
    <projectOwner>Janusz Swół - (POM)</projectOwner>
    <skipUTs>true</skipUTs>
  </properties>
  
  <!-- ===================================================================== -->
      
	<dependencies>
	    
    <!--
     Mixing JUnit and TestNG in one module can be done just by adding both
     as a plugin dependencies (not only as project dependencies): 
    -->
     
    <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>       
       <scope>test</scope>
    </dependency>

    <dependency>
       <groupId>org.testng</groupId>
       <artifactId>testng</artifactId>       
       <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>3.2</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>
    
    <!-- -->   
     
    <dependency>    
      <groupId>com.sun.mail</groupId>    
      <artifactId>javax.mail</artifactId>    
      <version>1.4.5</version>
      <scope>${projectScope}</scope>
    </dependency>
    
    <!-- HSQL database driver -->
	  <dependency> 
	    <groupId>org.hsqldb</groupId>  
	    <artifactId>hsqldb</artifactId>  
	    <version>2.2.7</version>
	    <scope>runtime</scope> 
	  </dependency>
    
    <!-- MySQL database driver -->
    <dependency>
		  <groupId>mysql</groupId> 
		  <artifactId>mysql-connector-java</artifactId> 
		  <version>5.1.5</version>  
		  <scope>runtime</scope>
    </dependency>     
    
    <!-- c3p0 connection management -->    
    <dependency> 
      <groupId>c3p0</groupId> 
      <artifactId>c3p0</artifactId> 
      <version>0.9.1.2</version> 
      <scope>runtime</scope>
    </dependency>   
   
    <!-- p6spy connection management -->
    <dependency>
      <groupId>p6spy</groupId>
      <artifactId>p6spy</artifactId>
      <version>1.3</version>
      <scope>runtime</scope>
    </dependency>

     <!-- DBCP connection management -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.2.2</version>
      <scope>runtime</scope>
    </dependency>    
    
    <!-- Hibernate reference -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>			
			<scope>${projectScope}</scope>
		</dependency>
		 
		<dependency>     
		  <groupId>org.hibernate</groupId>     
		  <artifactId>hibernate-c3p0</artifactId>		   
		  <scope>${projectScope}</scope>
		</dependency>	
    
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>						
			<scope>${projectScope}</scope>
		</dependency>
    
    <!-- JSR-303 (Bean Validation) Implementation -->
    <!-- Provides portable constraints such as @Email -->
    <!-- Hibernate Validator is shipped in JBoss AS 7
    <dependency>
       <groupId>org.hibernate</groupId>
       <artifactId>hibernate-validator</artifactId> 
       <scope>${projectScope}</scope>     
       <exclusions>
           <exclusion>
               <groupId>org.slf4j</groupId>
               <artifactId>slf4j-api</artifactId>
           </exclusion>
       </exclusions>
    </dependency>
    -->
    <!-- Annotation processor that raising compilation errors whenever 
         constraint annotations are incorrectly used. -->
    <dependency>
       <groupId>org.hibernate</groupId>
       <artifactId>hibernate-validator-annotation-processor</artifactId>       
    </dependency>
		
		<dependency>
      <groupId>org.picketlink.idm</groupId>
      <artifactId>picketlink-idm-core</artifactId>      
    </dependency>
		
    <dependency>          
      <groupId>log4j</groupId>          
      <artifactId>log4j</artifactId>         
      <scope>${projectScope}</scope>                    
    </dependency>    
    
    <dependency> 
       <groupId>org.slf4j</groupId>
       <artifactId>slf4j-simple</artifactId>
       <version>${version.slf4j}</version>
       <scope>${projectScope}</scope>
    </dependency>
       
	</dependencies>
  
  <!-- ===================================================================== -->

	<build>
	
	  <filters>
      <filter>${basedir}/src/test/resources/test.properties</filter>      
    </filters>
	
		<resources>
		    
		  <resource> 
        <directory>${basedir}/src/main/java</directory> 
        <includes> 
          <include>**/*.xml</include> 
          <include>**/*.properties</include>
        </includes> 
      </resource>  
		    
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
          <include>**/*.xml</include>
          <include>**/*.properties</include>
        </includes>
			</resource>	
			
			<resource>
        <directory>${basedir}/src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.xml</exclude>
          <exclude>**/*.properties</exclude>
        </excludes>
      </resource>
			
		</resources>	      	
      
    <testResources>
      <!-- Kopiowanie zasobów testowych -->
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.xml</include>
          <include>**/*.properties</include>
        </includes>
      </testResource>
      
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.xml</exclude>
          <exclude>**/*.properties</exclude>
        </excludes>
      </testResource>

    </testResources>
             

		<plugins>  		      
		        
      <!--
       @author : Marcin Zajączkowski
          How to use TestNG with JUnit together? 
          TestNG has a few features which are unavailable or less flexible in JUnit 
          (just to mention a few: dependencies between tests and groups of tests 
          (irreplaceable for integration tests with long startup), parametrized tests, 
          concurrent execution or per suite/group/class init/shutdown operations). 
          Therefore it is tempting to migrate existing tests from JUnit to TestNG. 
          Having large code base it could be not so easy to migrate all of them at once 
          and presented configuration allows to write the new tests in TestNG and rewrite 
          the old tests when appropriate.
          Btw, it is worth to mention that thanks to the fact TestNG generates reports also in 
          the JUnit’s XML format all the tools compatible with JUnit (Jenkins, Sonar, …) 
          will merge test results from JUnit and TestNG and display all of them properly. 
      -->       
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire.version}</version>
				
				<configuration>
				   <skip>${skipUTs}</skip>           
	         <suiteXmlFiles>
	            <suiteXmlFile> 
                ${project.build.directory}/test-classes/testng.xml
              </suiteXmlFile>
	         </suiteXmlFiles>
	         <!-- <groups>functest,perftest</groups> -->
	      </configuration> 
	      
        <dependencies> 
          <!--  -->         
          <dependency>
              <groupId>org.apache.maven.surefire</groupId>
              <artifactId>surefire-junit47</artifactId>
              <version>${surefire.version}</version>
          </dependency>
                     
          <dependency>
              <groupId>org.apache.maven.surefire</groupId>
              <artifactId>surefire-testng</artifactId>
              <version>${surefire.version}</version>               
          </dependency>                  
        </dependencies>
			</plugin>		
						     			
		</plugins>
		
	</build>
	
		
</project>
