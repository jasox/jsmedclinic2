<?xml version="1.0" encoding="UTF-8"?>

<project 
  xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>pl.jasox</groupId>
    <artifactId>medclinic</artifactId>
    <version>1.1.1</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>pl.jasox.medclinic</groupId>
  <artifactId>medical-ward</artifactId>
  <packaging>war</packaging>
  <name>Medical Ward Web</name>
  <description> JS Medical Clinic Application Web Module </description>
  
  <properties>    
    <jboss.as.plugin.version>7.3.Final</jboss.as.plugin.version>
    
    <!-- Deployment ( to remote JBoss AS 7 ) -->
    <!-- <jboss-as.deploy.host>10.23.14.95</jboss-as.deploy.host> --> 
    <jboss-as.deploy.host>127.0.0.1</jboss-as.deploy.host>  
    <jboss-as.deploy.user>admin</jboss-as.deploy.user>
    <jboss-as.deploy.pass>1234</jboss-as.deploy.pass>

    <!-- Deployment ( to remote GlassFish 3.1.1, js-laptop-hp, secure ) -->
    <!-- works after `enable-secure-admin` on asadmin in Glassfish!     -->
    <cargo.hostname>js-laptop-hp</cargo.hostname>
    <cargo.username>admin</cargo.username>
    <cargo.password></cargo.password> 
    <!--
    <cargo.username>jaoss</cargo.username>
    <cargo.password>1234</cargo.password>    
    -->    
    <netbeans.hint.deploy.server>gfv3ee6</netbeans.hint.deploy.server>
    <netbeans.hint.j2eeVersion>1.6</netbeans.hint.j2eeVersion>
  </properties>
  
  <!-- ===================================================================== -->

  <dependencies>
  
    <dependency>
      <groupId>${projectGroup}</groupId>
      <artifactId>${projectName}-domain</artifactId>
      <version>${projectVersion}</version>
      <type>jar</type>
    </dependency>
    <!--
    <dependency>
      <groupId>${projectGroup}</groupId>
      <artifactId>${projectName}-rest</artifactId>
      <version>${projectVersion}</version>
      <type>jar</type>
    </dependency>
     --> 
    <dependency>
      <groupId>${projectGroup}</groupId>
      <artifactId>${projectName}-ejb</artifactId>
      <version>${projectVersion}</version>
      <type>ejb</type>
    </dependency>
    <!--    
    <dependency>
      <groupId>${projectGroup}</groupId>
      <artifactId>${projectName}-simple</artifactId>
      <version>${projectVersion}</version>
      <type>jar</type>
    </dependency>  
    --> 
    
    <dependency>
      <groupId>org.jboss.spec</groupId>
      <artifactId>jboss-javaee-6.0</artifactId>
      <version>${jboss.javaee.version}</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    
    <!--
      Mixing JUnit and TestNG in one module can be done just by adding both
      as a plugin dependencies (not only as project dependencies):
    -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>       
      <scope>test</scope>
    </dependency>          
      
    <!-- Import the RichFaces core library 
    <dependency>
      <groupId>org.richfaces.core</groupId>
      <artifactId>richfaces-core-impl</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>cssparser</artifactId>
          <groupId>net.sourceforge.cssparser</groupId>
        </exclusion>
        <exclusion>
          <artifactId>guava</artifactId>
          <groupId>com.google.guava</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    -->
    <!-- Import the RichFaces components 
    <dependency>
      <groupId>org.richfaces.ui</groupId>
      <artifactId>richfaces-components-ui</artifactId>
    </dependency>
    -->
    <!-- Import the Atmosphere framework for a4j:push 
    <dependency>
      <groupId>org.atmosphere</groupId>
      <artifactId>atmosphere-runtime</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    -->
    <dependency>
      <groupId>org.picketlink.idm</groupId>
      <artifactId>picketlink-idm-core</artifactId>
      <version>${picketlink.idm.version}</version>
    </dependency>
    <!-- 
    <dependency>
      <groupId>com.ocpsoft</groupId>
      <artifactId>ocpsoft-pretty-time</artifactId>
      <version>${prettytime.version}</version>
    </dependency>

    <dependency>
      <groupId>com.ocpsoft</groupId>
      <artifactId>prettyfaces-jsf2</artifactId>
       <version>${prettyfaces.version}</version>
    </dependency>
    -->
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <version>2.1</version>
    </dependency>
    
    <dependency>
      <groupId>org.ocpsoft.rewrite</groupId>
      <artifactId>rewrite-servlet</artifactId>
      <version>2.0.11.Final</version>
    </dependency>
    
    <dependency>
      <groupId>org.ocpsoft.rewrite</groupId>
      <artifactId>rewrite-config-prettyfaces</artifactId>
      <version>2.0.11.Final</version>
    </dependency>
    <!--    
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
    </dependency>    
    -->
    
    <!-- Arquillian allows you to test enterprise code such as EJBs and 
         Transactional(JTA) JPA from JUnit/TestNG -->
    <dependency>
      <groupId>org.jboss.arquillian.junit</groupId>
      <artifactId>arquillian-junit-container</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.protocol</groupId>
      <artifactId>arquillian-protocol-servlet</artifactId>
      <scope>test</scope>
    </dependency>
    
    <!-- Obtaining ShrinkWrap Resolvers for use in your system can be done in 
         a single pass by declaring a dependency upon the depchain module  -->
    <dependency> 
      <groupId>org.jboss.shrinkwrap.resolver</groupId>
      <artifactId>shrinkwrap-resolver-depchain</artifactId>      
      <scope>test</scope>
      <type>pom</type>
    </dependency> 

  </dependencies>
  
  <!-- ===================================================================== -->

  <build>

    <defaultGoal>package</defaultGoal>

    <finalName>${projectName}-${projectVersion}</finalName>

    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <!-- activate only when you need to generate the metamodel -->
          <!-- <compilerArgument>-proc:none</compilerArgument>       -->
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.8</version>
        <configuration>
          <additionalBuildcommands>
            <!-- annoyingly creates a bin directory 
            <buildCommand> 
              <name>org.eclipse.wst.jsdt.core.javascriptValidator</name> 
            </buildCommand> -->
            <buildCommand>
              <name>
                org.jboss.tools.common.verification.verifybuilder
              </name>
            </buildCommand>
          </additionalBuildcommands>

          <additionalConfig>
            <file>
              <name>.settings/org.maven.ide.eclipse.prefs</name>
              <content>
                eclipse.preferences.version=1
                fullBuildGoals=process-test-resources
                includeModules=false
                resolveWorkspaceProjects=true
                resourceFilterGoals=process-resources
                resources\:testResources
                skipCompilerPlugin=true
                version=1
              </content>
            </file>
          </additionalConfig>

          <additionalProjectFacets>
            <jst.jsf>2.0</jst.jsf>
          </additionalProjectFacets>
          <additionalProjectnatures>
            <projectnature>org.eclipse.wst.jsdt.core.jsNature</projectnature>
            <projectnature>org.jboss.tools.jsf.jsfnature</projectnature>
          </additionalProjectnatures>
          <workspace>${user.home}/.eclipse/workspace</workspace>
          <wtpdefaultserver>JBossAS</wtpdefaultserver>
          <wtpversion>2.0</wtpversion>
          <downloadSources>true</downloadSources>
          <downloadJavadocs>true</downloadJavadocs>

        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <configuration>
          <skip>true</skip>          
          <suiteXmlFiles>
            <suiteXmlFile>
              ${project.build.directory}/test-classes/testng.xml
            </suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>      
      
      <!-- remote deployment on production server is not a good idea; 
           hard-deploy by local network on test server is better 
      <plugin>
        <groupId>org.codehaus.mojo</groupId>        
        <artifactId>jboss-maven-plugin</artifactId>
        <version>${jboss.maven.plugin.version}</version>
        <configuration>
          <jbossHome>${jboss.home}</jbossHome>
          <hostName>${jboss.hostName}</hostName>
          <serverId>${jboss.serverId}</serverId>
          <serverName>${jboss.serverName}</serverName>
          <fileNames>
            <fileName>
              ${project.build.directory}/${project.build.finalName}.war
            </fileName>
          </fileNames>
        </configuration>
      </plugin>
      -->
      
      <!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
      <!-- To use, run: mvn package jboss-as:deploy                           -->
      <plugin>
        <groupId>org.jboss.as.plugins</groupId>
        <artifactId>jboss-as-maven-plugin</artifactId>
        <version>${jboss.as.plugin.version}</version>
        <configuration>
          <!-- The execute-commands goal allows you to execute commands, 
               in the CLI format, on the running JBoss Application Server. -->
          <execute-commands>
            <commands>
              <command>/subsystem=logging/file-handler=debug:add(level=DEBUG,autoflush=true,
                       file={"relative-to"=>"jboss.server.log.dir", "path"=>"debug.log"})</command>
              <command>/subsystem=logging/logger=org.jboss.as:add(level=DEBUG,handlers=[debug])</command>
            </commands>
          </execute-commands>
        </configuration>
      </plugin>
      
      <!-- The cargo plugin deploys your war to a remote Glassfish 3 AS container -->
      <!-- To use, run: mvn package cargo:deploy                                  -->
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>1.4.2</version>
        <configuration>
          <!-- works after `enable-secure-admin` on asadmin in Glassfish! -->
          <container>
            <containerId>glassfish3x</containerId>
            <type>remote</type>
          </container>
          <configuration>
            <type>runtime</type>
            <properties>
              <cargo.runtime.args>force=true</cargo.runtime.args>
              <cargo.remote.username>${cargo.username}</cargo.remote.username>
              <cargo.remote.password>${cargo.password}</cargo.remote.password>                           
              <cargo.glassfish.admin.port>4848</cargo.glassfish.admin.port> 
              <cargo.hostname>${cargo.hostname}</cargo.hostname>
            </properties>
          </configuration>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.glassfish.deployment</groupId>
            <artifactId>deployment-client</artifactId>
            <version>3.1.1</version>
          </dependency>
        </dependencies>                
      </plugin>
  
    </plugins>

  </build>
  
  <!-- ===================================================================== -->

  <profiles>

    <profile>
      <id>distribution</id>
      <activation>
        <property>
          <name>release</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jbossas6</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>arquillian</name>
          <value>jbossas-managed-6</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
              <version>${maven.war.plugin.version}</version>
            <configuration>
              <webResources>
                <resource>
                  <directory>src/main/resources-jbossas6</directory>
                </resource>
              </webResources>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jbossas7</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>arquillian</name>
          <value>jbossas-managed-7</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>${maven.war.plugin.version}</version>
            <configuration>
              <webResources>
                <resource>
                  <directory>src/main/resources-jbossas7</directory>
                </resource>
              </webResources>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>glassfish</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>arquillian</name>
          <value>glassfish-remote-3.1</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>${maven.war.plugin.version}</version>
            <configuration>
              <webResources>
                <resource>
                  <directory>src/main/resources-glassfish</directory>
                </resource>
              </webResources>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Functional test profiles -->
    <!--
    <profile>
      <id>ftest</id>
      <activation>
        <activeByDefault>false</activeByDefault>       
        <property>
          <name>arquillian</name>
        </property>       
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <includes>
                <include>**/ftest/*Test.java</include>
              </includes>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    -->
     
    <profile>
      <id>jbossas-managed-6</id>
      <activation>
        <property>
          <name>arquillian</name>
          <value>jbossas-managed-6</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.seam.test</groupId>
          <artifactId>jbossas-managed-6</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>jbossas-remote-6</id>
      <activation>
        <property>
          <name>arquillian</name>
          <value>jbossas-remote-6</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.seam.test</groupId>
          <artifactId>jbossas-remote-6</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>jbossas-remote-7</id>
      <activation>
        <property>
          <name>arquillian</name>
          <value>jbossas-remote-7</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.seam.test</groupId>
          <artifactId>jbossas-remote-7</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>jbossas-managed-7</id>
      <activation>
        <property>
          <name>arquillian</name>
          <value>jbossas-managed-7</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.seam.test</groupId>
          <artifactId>jbossas-managed-7</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>glassfish-remote-3.1</id>
      <activation>
        <property>
          <name>arquillian</name>
          <value>glassfish-remote-3.1</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.seam.test</groupId>
          <artifactId>glassfish-remote-3.1</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>openshift-express</id>
      <activation>
        <property>
          <name>arquillian</name>
          <value>openshift-express</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.seam.test</groupId>
          <artifactId>openshift-express</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

  </profiles>

</project>
