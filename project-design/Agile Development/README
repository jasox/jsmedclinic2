--------------------------------------------------------------------------------
Pracę nad tym projektem starałem się planować, organizować i nadzorować
   zgodnie z metodyką AGILE - zwinnym procesem wytwarzania oprogramowania 
--------------------------------------------------------------------------------

do planowania i śledzenia postępów pracy w pierwszych iteracjach używałem narzędzia 
Scrumwise <http://www.scrumwise.com> w wersji trial, ale z powodu ograniczeń tej
wersji załączam zdjęcia Task-Board, klasycznej tablicy ściennej. 
Mimo wygody korzystania z narzędzi elektronicznych do prowadzenia projektu, większość
ekspertów podnosi zalety klasycznej formy dokumentowania postępów projektu, wskazując 
na funkcję motywującą i konsolidującą zespół, na korzyści szybkiej wymiany informacji
w dyskusjach pod tablicą.
 
Na początku tworzyłem program w iteracjach według metodyki Scrum z elementami XP, 
i co ważniejsze - planowałem tylko następną iterację. Po jej zakończeniu planowałem 
co zrobić dalej. Nie zakładałem z góry jaka architektura będzie najlepsza dla danego 
problemu, dlatego tworzyłem ją w miarę rozszerzania programu - to podejście XP  
( bo XP stosuje się głównie do aplikacji, w których nie wiadomo do końca, 
  co się tak naprawdę robi i jak to prawidłowo zrobić - czyli mój program w tej
  definicji doskonale się mieści. ) 

Założenia :
- "Zespół" składa się z dwóch osób
- Sprinty/iteracje są czterotygodniowe czyli zawierają 20 kalendarzowych dni roboczych
- Początkowa prędkość (velocity) zespołu wynosi 0.70 - czyli na sprint dysponujemy
   sumaryczną liczbą 28 efektywnych dni roboczych (man-days) :=
   (number-of-person-in-team)*(number-of-calendar-work-days-in-iteration)*(velocity)


--------------------------------------------------------------------------------

Po jednej iteracji "zespół" postanowił przejść z metodyki Scrum do ( jak się 
wydawało, bardziej odpowiadającej specyfice projektu ) metodyki Lean/Kanban.
Spowodowało to zmianę układu głównej tablicy projektu, tak aby uwidocznić ciągły
przepływ zadań i wartości dodane do nich na poszczególnych etapach procesu tworzenia 
aplikacji; oraz miało umożliwić śledzenie stanu całego projektu, a nie tylko 
poszczególnych iteracji.

Utrzymane zostały niektóre elementy metodyki Scrum - np. co dwa tygodnie - 
Backlog Grooming, czyli ewaluacja PBI metodą planning poker, przypisanie osoby 
odpowiedzialnej, ustalenie scenariusza testów akceptacyjnych, podział na zadania.

Co tydzień następowało planowanie, czyli wybór zadań na listę "Next 4 Tasks", 
"Next Tech Tasks" i "Next Bugs".
Stosowana była zasada że w fazie development praca może odbywać się nad maksymalnie
czterema zadaniami
Max WIP := 4   ( Max Work in Progress ) 

Po wykonaniu pewnego etapu pracy, co dwa tygodnie zaplanowane były spotkania :
Review - przegląd wykonanej pracy w obecności product owner'a, prezentacja wykonanych
funkcjonalności i
Retrospective - dyskusja w gronie developerów nad stylem pracy i procedurami które 
można ulepszyć, aby poprawiła się komunikacja w zespole i wzrosło zbiorowe poczucie 
odpowiedzialności za wykonaną pracę, przez co i produktywność.

Postęp procesu mierzony jest za pomocą :
 Velocity   := sum ( feature_effort ) - done in given week 
 Cycle time := How long did it take for feature X to move from "Next 4 Tasks" 
                 to "Ready for System Test"

Jeżeli przepływ zadania jest zablokowany, zaznacza się go różową nalepką.
Szczególnie pilne zadanie zaznaczane jest zieloną nalepką.
Ważne jest też ustalenie jasnych definicji kiedy dany etap pracy nad zadaniem 
uważa się za skończony ( Definition of Done ).

--------------------------------------------------------------------------------

